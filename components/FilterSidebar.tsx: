"use client";

import { useRouter, useSearchParams } from "next/navigation";
import { useMemo } from "react";

const PRODUCT_FILTERS = [
  { label: "Cleansers", value: "cleansers" },
  { label: "Toners", value: "toners" },
  { label: "Serums", value: "serums" },
  { label: "Moisturizers", value: "moisturizers" },
  { label: "Masks", value: "masks" },
  { label: "Bath & Body", value: "bath-body" },
  // If you add more categories, just drop them in here.
];

const SKIN_FILTERS = [
  { label: "Dryness", value: "dryness" },
  { label: "Oiliness", value: "oiliness" },
  { label: "Sensitivity", value: "sensitivity" },
  { label: "Anti-Aging", value: "anti-aging" },
  { label: "Acne", value: "acne" },
];

export default function FilterSidebar() {
  const router = useRouter();
  const sp = useSearchParams();

  // read current selections from URL (?type=a,b&skin=x,y)
  const typeSet = useMemo(() => new Set((sp.get("type") ?? "").split(",").filter(Boolean)), [sp]);
  const skinSet = useMemo(() => new Set((sp.get("skin") ?? "").split(",").filter(Boolean)), [sp]);

  const updateParam = (name: "type" | "skin", value: string, checked: boolean) => {
    const params = new URLSearchParams(sp.toString());
    const set = new Set((params.get(name) ?? "").split(",").filter(Boolean));
    checked ? set.add(value) : set.delete(value);
    set.size ? params.set(name, [...set].join(",")) : params.delete(name);
    // preserve everything else (category, sort, etc.)
    router.replace(`?${params.toString()}`, { scroll: false });
  };

  return (
    <aside className="border rounded-lg bg-white/60 backdrop-blur p-4 h-max sticky top-24">
      {/* PRODUCT FILTERS */}
      <p className="font-medium">Filter by</p>
      <div className="mt-4 space-y-3 text-sm">
        {PRODUCT_FILTERS.map(({ label, value }) => (
          <label key={value} className="flex items-center gap-2">
            <input
              type="checkbox"
              className="accent-cucumber-600"
              checked={typeSet.has(value)}
              onChange={(e) => updateParam("type", value, e.currentTarget.checked)}
            />
            {label}
          </label>
        ))}
      </div>

      {/* SKIN TYPE FILTERS */}
      <p className="mt-6 font-medium">Skin Type</p>
      <div className="mt-4 space-y-3 text-sm">
        {SKIN_FILTERS.map(({ label, value }) => (
          <label key={value} className="flex items-center gap-2">
            <input
              type="checkbox"
              className="accent-cucumber-600"
              checked={skinSet.has(value)}
              onChange={(e) => updateParam("skin", value, e.currentTarget.checked)}
            />
            {label}
          </label>
        ))}
      </div>
    </aside>
  );
}